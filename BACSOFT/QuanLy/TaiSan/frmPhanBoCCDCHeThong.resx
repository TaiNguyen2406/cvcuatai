<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="meSql.EditValue" xml:space="preserve">
    <value>declare @time as datetime
declare @time2 as datetime
set @time='2013/8/31'
set @time2='2013/7/31'
select *
,(SoLuong-SoLuongHongDauKy-SoLuongHongTrongKy) as SoLuongThuc
, (SoLuong-SoLuongHongDauKy)*DonGia/SoNgayKH  as mucpb
, case when SoNgayKH&lt; datediff(day, NgayThang,@time) then 0 else (SoLuong-SoLuongHongDauKy-SoLuongHongTrongKy)*DonGia/SoNgayKH*  datediff(day, NgayThang,@time)+ (SoLuongHongDauKy+SoLuongHongTrongKy)*DonGia  end  as pbluyke
, case when SoNgayKH&lt; datediff(day, NgayThang,@time) then 0 else case when datediff(day, NgayThang,@time2)&gt;0 then (SoLuong-SoLuongHongDauKy)*DonGia/SoNgayKH*  datediff(day, @time2,@time) else (SoLuong-SoLuongHongDauKy)*DonGia/SoNgayKH*  datediff(day, NgayThang,@time) end +(SoLuongHongTrongKy)*DonGia/SoNgayKH* (SoNgayKH- datediff(day, NgayThang,@time)) end  as pbthang
,  case when SoNgayKH&lt; datediff(day, NgayThang,@time) then 0 else  SoLuong*DonGia- ((SoLuong-SoLuongHongDauKy-SoLuongHongTrongKy)*DonGia/SoNgayKH*  datediff(day, NgayThang,@time)+ (SoLuongHongDauKy+SoLuongHongTrongKy)*DonGia) end    as saupb
,case when SoNgayKH&lt; datediff(day, NgayThang,@time) or (SoLuong-SoLuongHongDauKy-SoLuongHongTrongKy)=0  then '0' else CONVERT(varchar(50),SoNgayKH- datediff(day, NgayThang,@time))+N' ngày =' +CONVERT(varchar(50),(SoNgayKH- datediff(day, NgayThang,@time) )/30 )+N' tháng '+ case when (SoNgayKH- datediff(day, NgayThang,@time) )%30&gt;0 then CONVERT(varchar(50),(SoNgayKH- datediff(day, NgayThang,@time) )%30 )+N' ngày' else '' end end  as thoigianconpb
 from
 (
(
select Taisan_CongCuDungCu.*,  PHIEUXUATKHO.NgayThang, SoLuong, DonGia, SoLuong*DonGia as tongtien,TENVATTU.Ten AS TenVT
,(select COUNT(id) from Taisan_ChiTietCCDC where ngaythanhly &lt;@time2 and idccdc =Taisan_CongCuDungCu .id) as SoLuongHongDauKy
,datediff(day, NgayThang,DATEADD (month,thoigiankh,NgayThang)) as SoNgayKH
,(select COUNT(id) from Taisan_ChiTietCCDC where ngaythanhly &gt;=@time2 and ngaythanhly &lt;=@time and idccdc =Taisan_CongCuDungCu .id) as SoLuongHongTrongKy
 ,datediff(day, NgayThang,@time) as thoigiansudung
 
from Taisan_CongCuDungCu inner join XUATKHO on Taisan_CongCuDungCu.idxuatkho=XUATKHO.ID and isnull(isCT,0)=0 INNER JOIN VATTU ON XUATKHO.IDVatTu=VATTU.ID INNER JOIN PHIEUXUATKHO ON PHIEUXUATKHO.SoPhieu=XUATKHO.SoPhieu LEFT OUTER JOIN TENVATTU ON VATTU.IDTenvattu=TENVATTU.ID--, Taisan_DinhMuc 
 where 1=1 and NgayThang&lt;=@time
)
union

(
select Taisan_CongCuDungCu.*, PHIEUXUATKHO.NgayThang, 1 as SoLuong, BANGCHAOGIA.Tienthucthu as DonGia, BANGCHAOGIA.Tienthucthu as tongtien,BANGCHAOGIA.TenDuan as TenVT
,(select COUNT(id) from Taisan_ChiTietCCDC where ngaythanhly &lt;@time2 and idccdc =Taisan_CongCuDungCu .id) as SoLuongHongDauKy
,datediff(day, PHIEUXUATKHO.NgayThang,DATEADD (month,thoigiankh,PHIEUXUATKHO.NgayThang)) as SoNgayKH
,(select COUNT(id) from Taisan_ChiTietCCDC where ngaythanhly &gt;=@time2 and ngaythanhly &lt;=@time and idccdc =Taisan_CongCuDungCu .id) as SoLuongHongTrongKy
 ,datediff(day, PHIEUXUATKHO.NgayThang,@time) as thoigiansudung
from Taisan_CongCuDungCu inner join BANGCHAOGIA on Taisan_CongCuDungCu.idxuatkho=BANGCHAOGIA.ID and isnull(isCT,0)=1 inner join PHIEUXUATKHO on PHIEUXUATKHO .SophieuCG =BANGCHAOGIA.Sophieu
 where 1=1 and PHIEUXUATKHO.NgayThang&lt;=@time
)
union
(
select Taisan_CongCuDungCu.*,  NgayNhap NgayThang , SoLuongCCDC as SoLuong, GiaTri as DonGia, GiaTri*SoLuongCCDC   as tongtien,TenCCDC as TenVT
,(select COUNT(id) from Taisan_ChiTietCCDC where ngaythanhly &lt;@time2 and idccdc =Taisan_CongCuDungCu .id) as SoLuongHongDauKy
,datediff(day, NgayNhap,DATEADD (month,thoigiankh,NgayNhap)) as SoNgayKH
,(select COUNT(id) from Taisan_ChiTietCCDC where ngaythanhly &gt;=@time2 and ngaythanhly &lt;=@time and idccdc =Taisan_CongCuDungCu .id) as SoLuongHongTrongKy
 ,datediff(day, NgayNhap,@time) as thoigiansudung
from Taisan_CongCuDungCu 
 where 1=1 and  NgayNhap&lt;=@time and sophieu is null
)
)tbc</value>
  </data>
  <metadata name="BarManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>